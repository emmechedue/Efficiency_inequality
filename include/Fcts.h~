/* 
 * File:   Fcts.h
 * Author: sduca
 *
 * Created on February 2, 2015, 2:05 PM
 */

#ifndef FCTS_H
#define	FCTS_H



#endif	/* FCTS_H */

#pragma once

// Standard C++ library includes 
#include<cstdio>
#include<cstdlib>
#include<fstream>
#include<cmath>
#include<iomanip>
#include <algorithm>    
#include <vector>       
#include <new> 

// Boost multiprecision
#include <boost/multiprecision/cpp_dec_float.hpp>

// My includes
#include "Constants.h"
#include "mpEXP.h"

using namespace std;

/************************************** THIS IS THE ORDERING FUNCTION **************************/
/* This function accepts as parameters:
(r), (w), (alpha): talent, wealth and contribution fraction of individuals
(rank): an array that represents the ranking of the agents according to the contributions
(cons): the array of constants.
(O): the array of outputs (I need it for later).

It then orders the agents in terms of the chosen ordering rule (as given by cons). It also outputs O[i]=r[i]*alpha[i]*w[i] (it's needed later)
The ordering rules are the following:
1) Everything: O[i]=r[i]*alpha[i]*w[i]
2) Amount of money contributed (no talent): O[i]=alpha[i]*w[i]
3) Combination of talents and willingness to contribute (Western meritocracy style): O[i]=r[i]*alpha[i]
4) Only willingness to contribute: O[i]=alpha[i]
*/
void makeorder(double *r,double *w,double *alpha,int *rank,Constants cons, double *O){

	int enne=cons.N; //dummy variable that is equal to cons.N
	double X[enne]; //This is the quantity that will decide the ordering
	//vector<int> Y(rank,rank+enne); //I have to create the array due to how sort works
        //vector<int> Shuf(rank,rank+enne); //Vector that I will shuffle, to provide a random ranking in case of ties
        vector<int> Y (enne,0);
        vector<int> Shuf (enne,0);
	int i; //dummy variable
	
	/****************** Generate the output vector **/
	for(i=0;i<enne;i++){ 
		O[i]=r[i]*alpha[i]*w[i];
                Y[i]=i;
	}
	/********************* COMPUTE THE ORDERING ARRAY ****************/
	switch(cons.Choice){
		case 1:
			for(i=0;i<enne;i++){
				X[i]=O[i];
			}			
			break;
			
		case 2:
			for(i=0;i<enne;i++){
				X[i]=alpha[i]*w[i];
			}
			break;
			
		case 3:
			for(i=0;i<enne;i++){
				X[i]=r[i]*alpha[i];
			}
			break;
			
		case 4:
			for(i=0;i<enne;i++){
				X[i]=alpha[i];
			}
			break;
		
		default:
			cout<<"ERROR IN THE SWITCH IN THE MAKEORDER FUNCTION";
			break;
	}
	/********************************************************************************/
	/*************** DEFINITION OF THE COMPARING FCT AND THEN SORTING ***************/
        
        for(i=0;i<enne;i++){ //Here I create a random order that I can use to break ties. Here i fill in the vector with increasing numbers
            Shuf[i]=i;
        }
        random_shuffle(begin(Shuf), end(Shuf)); //Here I shuffle the vector
        
	auto fancycompare = [&](int i, int j){ //This function order the agents in terms of their output. With this particular configuration it puts the agents that contribute more in the beginning and the others at the end
		double trial;
	
		trial= X[i]-X[j];
		if(trial==0){
			trial=Shuf[i] - Shuf[j]; //If the 2 contributions are equal, I resort to the ordering of Shuf
		}
		//Hence trial can never be ==0
                if(trial<0){return false;} //If you want ordering s.t. the lowest contributors are in the beginning, you have to switch that.
		else{return true;}	
	};	
	
	sort(Y.begin(),Y.end(),fancycompare); //Here I sort the array
	
	/******************** COPYING THE RESULTS BACK IN THE ORIGINAL ARRAY ****************/
	for(i=0;i<enne;i++){ //Here I'm just copying the result back in the original array
		rank[i]=Y[i];
	}
	return;
}
/************************************************************************************************************************************/

/*This function just returns the sum over the vector of length n*/
double sumofvector(double *a, int N){
    double res;
    int i;
    
    res=0;
    
    for(i=0;i<N;i++){
        res = res + a[i];
    }
    
    return res;
}


/*This function renormalizes an array of size N such that its sum amounts to 1*/
void renormalizearray(double *w, int N){
    double sum;
    int i;
    
    //Let's compute the total sum of the array
    sum = sumofvector(w,N);
 
    // Now let's renormalize
    for(i=0;i<N;i++){
        w[i] = w[i]/sum;
    }
    
    return ;
}

double computeaverage(double *vec, int n){ //This function computes the non-weighted average of a vector vec of length n
    int i;
    double res;
    
    res=0;
    for(i=0;i<n; i++){
        res= res + vec[i];
    }
    
    res=res/n;
    
    return res;    
}

/************************ HERE I CREATE THE GROPS BASED ON THE RANKING AND UPDATE THE WEALTH*****************************************

Each person receives a payoff given by: w[i]*(1-alpha[i])+Sum{QO[j]} for the j's in the group of i! 
M is the number of groups in the system */

void formgroups(double *w, double *alpha, double *O, int *rank, Constants cons, int M){
	int i,j,k; //i and j are dummy variables, k needs to be updated by hand and will be used for the rank
	double gain; //The gain in the group

	k=0; //Initialize k to zero
	for(i=0;i<M;i++){ //Here i sum over all the groups
		
		gain=0; //Set the gain of the group to 0.
		
		for(j=0;j<cons.S;j++){
			gain = gain + O[rank[k+j]]; //Here I am adding to the common pool the contribution due to rank[k]+j
		}
		
		gain = gain*cons.Q; //Correct for the return rate
		
		for(j=0; j<cons.S;j++){
			w[rank[k]] = w[rank[k]]*(1.-alpha[rank[k]]) + gain; //Here I update the wealth of all the players
			k++; //Here I update k so that it keeps track for the next round
		}
		
	}
	return;
}

/****************************************************************************************************************************************/

/********************************** HERE I COMPUTE THE GINI COEFFICIENT *************************************

The Gini coefficient is computed as defined from Wikipedia, in particular, given that y[i] is the wealth of an individual i, and y[i] is ordered in increasing order (i.e. y[i]<=y[i+1]) we have:
G=1/n(n+1-2((Sum{(n+1-i)*y[i]})/(Sum{y[i]})))
*/

double computegini(double *w, Constants cons){
	
	int enne=cons.N; 
	vector<double> y(w,w+enne); //Vector of wealth. I have to define it like that because I have to order it
	double G;
	double dummy1, dummy2; //dummy doubles
	int i; //dummy integer
	
	sort(y.begin(),y.end()); //Here I sort the wealth vector increasing order
	
	dummy1=0;
	for(i=0; i<enne;i++){ //Here I compute the sum at the numerator
		dummy1=dummy1+(enne-i)*y[i]; //Here it should be enne +1 -i for i that goes between 1 and enne => enne +1 -(i +1) for i that goes from 0 to enne-1
	}
	
	dummy2=0;
	for(i=0; i<enne;i++){ //Here I compute the sum at the denominator
		dummy2=dummy2+y[i];
	}
	
	G=enne + 1. -2.*(dummy1/dummy2); //Here I finish the computation
	G=G/enne;
	
	return G;
}

/*This function here just compute the logit probability as the one in eq. one of "The Logit response dynamics" paper*/
double logitprob(double beta, double util){
    double out;

	//out = exp(beta * util);
	cout << "Usual exp(" << beta << "*" << util << "): " << exp(beta * util) << endl; 	
	out = double(mpEXPcpp(beta*util));
	cout << "mpEXP exp(" << beta << "*" << util << "): " << out << endl;
    
    return out;
}

/************************* Function that prints all the parameters in a file **************************************/
void printparamsingleloop(ofstream& filec, Constants cons){
	filec<<"#Number of agents playing the game:"<<endl;
	filec<<"N= "<<cons.N<<endl<<endl;
	filec<<"#Time at which I stop the simulation:"<<endl;
	filec<<"T= "<<cons.T<<endl<<endl;
    filec<<"#Time interval to print my data:"<<endl;
	filec<<"interval= "<<cons.interval<<endl<<endl;
	filec<<"#Size of the groups:"<<endl;
	filec<<"S= "<<cons.S<<endl<<endl;
	filec<<"#Return rate:"<<endl;
	filec<<"Q= "<<cons.Q<<endl<<endl;
	filec<<"#Lambda parameter for the Exponential distribution:"<<endl;
	filec<<"lambda= "<<cons.lambda<<endl<<endl;
	filec<<"#Mean of the Gaussian distribution for the talent:"<<endl;
	filec<<"mu= "<<cons.mu<<endl<<endl;
	filec<<"#Variance sigma of the Gaussian distribution for the talent:"<<endl;
	filec<<"sigmag= "<<cons.sigmag<<endl<<endl;
	filec<<"#Initial wealth value:"<<endl;
	filec<<"W0= "<<cons.W0<<endl<<endl;
	filec<<"#Number that indicates the choice of what are we using to rank agents in the groups:"<<endl;
	filec<<"Choice= "<<cons.Choice<<endl<<endl;
	filec<<"#Indicates in how many intervals I want to divide the interval [0,1] for the contributions. The number of strategies available to each player is this number +1"<<endl;
	filec<<"monincr= "<<cons.monincr<<endl<<endl;
	filec<<"#This is the noise parameter in the logit:"<<endl;
	filec<<"beta= "<<cons.beta<<endl<<endl;
	return;
}
/*****************************************************************************************/

/************************* Function that prints the various output at every time loop. ****************************

In particular, it prints the time, the Gini coefficient and the efficiency at each round on one file and all the generated wealth on another file , and the average cooperation level
*/

void printstuffsingleloop(ofstream& filet,ofstream& filew, ofstream& filec ,double t, double eff, double *w, double *alpha,Constants cons){

    int i; //Dummy variable
    double gini; //Index of inequality. Inequality is computed as the gini coefficient (see note in the fcts)
    double averagec; //Average level of cooperation at time step t   
    /*Let's first of all compute the Gini coefficient and the efficiency*/
        
    gini = computegini(w, cons); //Here I instead compute the Gini coefficient
    averagec = computeaverage(alpha, cons.N);

    filet<<t<<" "<<gini<<" "<<eff<<" "<<averagec<<endl; //Here I print the time, the Gini coefficient, the efficiency and the average level of cooperation
	
    for(i=0;i<cons.N;i++){ //Here I print the entire wealth for each agent at each time step and (on another file) the strategy of each agent
        filew<<w[i]<<" ";
        filec<<alpha[i]<<" ";
    }
    filew<<endl;
    filec<<endl;
    return;
}
/**************************************************************************/
/*This function here returns the rank of the agent k. It's the inverse of rank*/
int inverserank(int k, int *rank, Constants cons){
    int i; //dummy variable
    int out; //the output
    
    for(i=0;i< cons.N; i++){
        if(rank[i]==k){
            out=i;
            break;
        }
    }
    return out;
}

/* This function here will calculate the utility that agent k would get from his group
 It is different from formgroups because here I just compute the utlity for the q-th agent*/
double getutility(int q, double *w, double *alpha, double *O, int *rank, Constants cons, int M){
	int j,k; //i and j are dummy variables, k needs to be updated by hand and will be used for the rank
	double gain, utility; //The gain in the group and the utlity of q
        int g; //The group in which q is
        int place; //The rank of q
        
        /*As first thing we have to compute what is the ranking of */
        place=inverserank(q,rank,cons);
        /*As second thing we have to compute in which group the q-th agent is ending up*/
        g = place/cons.S;
        
        /*Then I skip directly to that group and compute the gain in that group*/
        k=cons.S * g; //I start from the k-th ranked agent
        gain=0; //Set the gain of the group to 0.
	
        for(j=0;j<cons.S;j++){
            gain = gain + O[rank[k+j]]; //Here I am adding to the common pool the contribution due to rank[k+j]. Due to how the systyem is designed, one of those people is q
	}
		
	gain = gain*cons.Q; //Correct for the return rate
		
        utility = w[q]*(1.-alpha[q]) + gain; //This is the utility	
	
	return utility;
}
//******************************************************************************************************

int binaryprobsearch(double *Gamma, int M, double x) { //Binary search. Gamma is the array of cumulative prob. M is the lenght of the array and x is the random number between zero and one
    int a, b, l, result;
    bool check;
    a = 0;
    b = M - 1;
    
    do {
        l = (a + b) / 2;
        if (x <= Gamma[l]) {
            if ((x >= Gamma[l - 1])&&(l > 0)) {
                result = l;
                check = true;
            } else {
                if (l > 0) {
                    b = l;
                    check = false;
                } else {
                    result = 0;
                    check = true;
                }
            }
        } else {
            if (x <= Gamma[l + 1]) {
                result = l + 1;
                check = true;
            } else {
                a = l;
                check = false;
            }
        }
    } while (check == false);
    return result;
}



/************************ THIS FUNCTION IS THE ONE THAT SAMPLES WHICH STRATEGY IS THE PLAYER GOING TO CHOOSE. IT IS BASED ON THE LOGIT SAMPLING 
The idea is that I compute for player k all the possible utilities he could have and then I sample according to the logit */
void updatestrategy(int k, double *alpha, double *w, double *r,Constants cons, gsl_rng *gslpointer){
    
    int p= cons.monincr + 1; //Number of strategies available to k
    double lenghtofinterval= 1./cons.monincr ; //Lenght of the interval in which I divide the interval [0,1]
    double utility, oldutility; //they contain the possible utility for player k for a strategy and the previous one
    double dummyalpha[cons.N]; //A dummy vector where I copy all the strategies of the other players and then I update the one of player k
    int oldplace=0; //Dummy vector to store the old ranking (to check if the ranking changes or not according to the new strategy). Initialize to a negative for the first time it checks the if
    int place; //To store the ranking of the k-th agent
    int i;
    int dummyrank[cons.N]; //The vector that will do all the ranking
    double dummyO[cons.N]; //The dummy vector of outputs
    int M = cons.N/cons.S; //I already check in the main that I can do that
    //double probarr[p]; //the array with the probabilities;
    cpp_dec_float_100 probarr[p]; //the array with the probabilities;
    vector<double> cumprob (p,0); //The array with the cumulative probabilities
    //double sum; //dummy variable
    cpp_dec_float_100 sum; //dummy variable
    double tmp_var;
    
    for(i=0; i<cons.N ; i++){ //Here I copy the vector of strategy into this fake one. Note that I don't directly pass the pointer because I want to manipulate this one. Hence I have to copy all the array
        dummyalpha[i]=alpha[i];
    }

    sum=0; //This is to normalize the probability at the end
    
    /************* This is the loop over all the possible strategies for player k *****************
     * Here I also compute the probability of a certain strategy */
    for(i=0; i < p ; i++){
        dummyalpha[k]  = i*lenghtofinterval; //Set the strategy of k 
        makeorder(r,w,dummyalpha,dummyrank,cons,dummyO); //Make the rankings
        place=inverserank(k,dummyrank,cons); //The position where k is placed
        if(place==oldplace){ //If the rank of k is the same, I don't have to reform the groups. I just update the utility
            utility=oldutility + lenghtofinterval * w[k] * (cons.Q * r[k] -1); //It's fine because for i=0, I'm sure that this if will never take place because oldplace is initialized to a negative number
        }
        else{ //In this other case I actually have to reform the group
            utility=getutility(k, w, dummyalpha, dummyO, dummyrank, cons, M); //Actually form the group and compute the utility
        }

        //probarr[i] = logitprob(cons.beta , utility); //Here I compute the probability according to the logit and the sum
        probarr[i] = mpEXPcpp(cons.beta*utility);
	cout << "mpEXP exp(" << cons.beta << "*" << utility << "): " << probarr[i] << endl;
        sum = sum + probarr[i];
        
        oldutility=utility;
        oldplace=place;
    }
    
    /*Now let's renormalize the probabilities and create the array of cumulative probabilities*/
    
    probarr[0] =  probarr[0]/sum;
    //cumprob[0] =  probarr[0]; //I have to do the first by end.
    cumprob[0] =  double(probarr[0]); //I have to do the first by end.
    for(i=1;i < p; i++){
        probarr[i]=  probarr[i]/sum;
        //cumprob[i]=cumprob[i-1] + probarr[i]; //Here I sum the cumulative probability
        cumprob[i]=cumprob[i-1] + double(probarr[i]); //Here I sum the cumulative probability
    }
    /*Now let's sample the strategy */
    
    //sum= gsl_ran_flat(gslpointer,0,1); //Generate a random number btw 0 and 1. Note that I use sum here just to not use another variable
    tmp_var = gsl_ran_flat(gslpointer,0,1);
    //i=binaryprobsearch(&cumprob[0],p,sum); //Here I compute which strategy is the agent k using. Note that I use i here just to not use another variable
    i=binaryprobsearch(&cumprob[0],p,tmp_var); //Here I compute which strategy is the agent k using. Note that I use i here just to not use another variable
   /*Note that if I had to sample many times from the same distribution, it would have been smarter to use the GSL tool for "General Discrete Distributions"
    Here I need to sample only one, hence I sample it by hand, using a binary search method*/
    
    alpha[k]=i*lenghtofinterval; //Here I set the value for alpha[k]. I.e. I set the strategy for agent k
    
    return ;
}

/*This function takes an old average and updates it to the new average based on i. 
i is the number of event I had to average before (so minus the one I'm averaging now).
 Hence if it is the first time I'm computing the average, i=0.*/
double updateaverages(double oldval, double newval, int i){
    double res;
    
    if(i==0){
        return newval;
    }
    
    else{
        res=i*oldval + newval;
        res = res/(i+1);
    
        return res;
    }
    
}
